비밀번호
ORACLE : 1234
SCOTT : tiger

conn system/1234
show user : 현재 접속중인 유저
conn scotter/tiger
alter user s
cott  identified by tiger acoount unlock;

==========================

select * form tab;

--테이블 정보 조회
select * from tab;

--테이블의 내부  컬럼 구조
desc dept;

SQL
-c(Create) : insert
-r(Read) : select *가장 어렵고,가장 많이 사용하는*
-u(Update) : update
-d(Delete) : delete


select deptno,dname,loc
from dept;

select *    --전체 레코드 조회
from dept;

select deptno,dname,
from dept;

select distinct(조회 할 때만 중복 제거) job
from emp;

select ename,sal
from emp;

-- 컬럼에 별칭 사용
select ename as "사원이름",sal as "급여" (as 생략가능)
from emp;

select ename,sal,sal * 12
from emp;

select ename,sal,sal * 12 "연봉"
from emp;

select ename,sal,sal * 12 + comm as "연봉"
from emp;


select 
from
order by 기준이 되는 컬럼명 asc/desc; -- 정렬조건(내림,오름차순)

select *
from emp
order by empno asc;

-- 조건절
select *
from emp
where 컬럼명 비교연산자 값 --조건식(true,false) 

select *
from emp
where empno = 7369

select *
from emp
where sal >= 3000;

-- and, or 논리연산자

select * 
from emp
where sal >= 3000 and deptno = 20;

select * 
from emp
where sal >= 3000 or deptno = 20;

select *
from emp
where sal > 1000 and sal <= 2000;

select *
from emp
where sal > 1000 and sal <= 2000;

-- 산술연산자
-- + , - , * , /(몫)

select * 
from emp
where sal * 12 = 36000;

-- 비교연산자
-- <, >, <=, >=, =, !=, <>

select * 
from emp
where 컬럼명

-- 문자(대소문자 구분, 홑따옴표'' 사용)
select *
from emp
where ename = 'smith';

select *
from emp
where ename = 'SMITH';  --table안에 저장된 값은 대소문자를 구분한다

-- 날짜(날짜 형식을 갖추어야한다, 홑따옴표''반드시 사용)
select *
from emp
where hiredate = '80/12/17';    -- '19801217'사용 가능

select *
from emp
where hiredate = '19801217'; 

-- 문자,날짜가 대소 비교가능
select * 
from emp
where ename >= 'F';

select *
from emp
where hiredate >= '19811117'; 

--  논리연산 (and,or,not)
select * 
from emp
where not sal > 3000;   -- 해당 조건을 재외한 나머지를 조회

select * 
from emp
where sal = 800 or sal = 1500 or sal = 5000;

select * 
from emp
where sal in(800,1500,5000);    --바로 위의 or3개의 식과 in()는 같다

select * 
from emp
where sal not in(800,1500,5000);

select *
from emp
where sal >=3000 and  sal <= 5000;

select *
from emp
where sal between 3000 and 5000;    --바로 위의 and 식과 between식은 같다

select *
from emp
where sal not between 3000 and 5000;

--LIKE 연산자
-- 와일드카드( _  , % )
--% : 문자가 없어도 되고 또는 하나 이상 가능
-- _ : 언더바 하나가 한 문자 (반드시 값이 있어야 한다) 
-- 1. 어떤 값으로 시작하는 조건
-- 2. 어떤 값으로 끝나는 조건
-- 3. 어떤 값을 포함하는 조건

select *
from emp
where ename = 'FORD';

select *
from emp
where ename = 'F';

select * 
from emp
where ename like 'F%'

select *
from emp 
where ename like 'F___';

select *
from emp
where ename like '%D';  -- 이름의 끝이 D

select *
from emp
where ename like '%A%';    -- 이름에 A를 포함하는 전부

select *
from emp
where ename like '%A__';  --혼한하여 사용 가능

-- null값은 직접 연산 불가
-- is null, is not null 만 null연산 가능
select *
from emp
where comm null;    -- 연산불가

select *
from emp
where comm is null;

select *
from emp
where comm is not null;

select ename,sal,comm,sal*12 + comm as "연봉" 
from emp;

-- 집합 연산자
-- 쿼리문과 쿼리문의 결과를 연산한다.
-- 쿼리문의 컬럼의 타입과 갯수가 동일해야 한다.
-- 합집합{union(중복제거),union all(중복포함)}
-- 교집합(intersect)
-- 차집합(minus)

select empno,ename,sla,deptno
from emp
where denptno = 10	-- 중간식에 ; 들어가면x
union
select empno,ename,sal,deptno
from emp
where deptno = 20;

select empno,ename,sal,deptno
from emp
where deptno = 10	
union all
select empno,ename,sal,deptno
from emp
where deptno = 10;

select empno,ename,sal,deptno
from emp
minus
select empno,ename,sal,deptno
from emp
where deptno = 10;

-- 문자 관련 함수
-- upper() : 대문자로 변경
-- lower() : 소문자로 변경
-- length() : 문자열 길이
-- substr() : 일부 문자 추출(1부터 시작)
-- instr() : 특정 문자 위치값 찾기
-- replace() : 다른문자로 대체
-- rpad(),lpad() : 자리수 수정
-- concate() : 문자열 연결

select upper(ename),lower(ename)
from emp

select upper(ename),lower(ename)
from emp;


select *
from emp
where lower (ename) = 'ford';

select ename,length(ename)
from emp
where length(ename) >= 5;

select ename, substr(ename,3,2)
from emp;

select ename, instr(ename,'A')
from emp;

select *
from emp
where ename like '%S%';

select *
from emp
where instr(ename,'S')>0

select '010-1111-1234', replace('010-1111-1234' , '-' ,")
from emp;

select ename,lpad(ename,10,'#')
from emp;

select ename,rpad(ename,10,'#')
from emp;

select ename,lpad(ename,10)
from emp;

select ename,job
from emp;

-- 숫자 관련 함수
-- round() : 반올림 함수
-- trunc() : 지정된 위치에서 숫자 버림
-- ceil() : 강제 올림 함수
-- floor() : 강제 버림 함수
-- mod() : 나머지 구하는 함수

select round(1234.5678),round(1234.5678,2)
from dual;

select trunc(1234.5678),trunc(1234.5678,1),trunc(1234.5678-1)
from dual;

select ceil(1234.5678),floor(1234.5678)
from dual;

select mod(10,2),mod(11,2),mod(11,3)
from dual;

select *
from emp
where mod(empno,2) = 0; -짝수일 경우 

select *
from emp
where not mod(empno,2) = 0; - 짝수가 아닐 경우

-- 날짜 관련 함수
-- sysdate : 현재 시스템의 날짜
-- add_months()  : 개월 수 연산
-- months_between() : 개월 수간 차이
-- last_day() : 달의 마지막 날짜

select sysdate - 1 어제,sysdate 오늘,sysdate + 1 내일
from dual;

select trunc(sysdate - hiredate) as"일수",trunc((sysdate - hiredate)/365) as"년수"
from emp;

select *
from emp 
where add_months(hiredate,480) > sysdate;

select * 
from emp
where trunc((sysdate - hiredate)/365) < 40;

select ename,hiredate,sysdate,trunc(months_between(sysdate,hiredate)) as"차이나는 개월수"
from emp;

select last_day(sysdate)
from dual;

-- 형변환 함수
-- to char() : 숫자,날짜를 문자 데이터로 형 변환
-- to_number() : 문자,날짜를 숫자 데이터로 형 변환
-- to_date() : 숫자,문자를 날짜 데이터로 형 변환

select sysdate, to_char(sysdate,'yyyy-mm-dd hh24:mi:ss')as 현재날짜
from emp;

select sysdate, to_char(hiredate,'yyyy-mm-dd hh24:mi:ss day')as 현재날짜
from emp;

select 10000,to_char(10000,'999,999')
from dual;

select 10000,to_char(10000,'000,000')
from dual;

select sal, to_char(sal,'L999,999')
from emp;

select 1300 - '1500'
from dual;

select '1300' - '1500'
from dual;

select '1,300' - '1,500' --자동 형변환
from dual;

select to_number ('1,300','999,999') - to_number('1,500','999,999')
from dual;

select to_date('2025/02/18','yyyy,mm,dd')
from dual;

select *
from emp
where hiredate >= '81-11-17'; -- 자동 형변환

select *
from emp
where hiredate >= to_date('1981/11/17','yyyy/mm/dd');   --형식문자의 자리수에 맞게 정의한다

-- 기타함수
-- nvl(nul,변경을 원하는 값) : null값을 원하는 값으로 변경
-- null의 타입과 변경값의 타입이 일치해야 한다

select ename,sal,comm ,sal*12+ nvl(comm,0)
from emp;

-- decode(값1, 비교갑1,결과값1,비교값2,결과값2,,,,defualt결과) : switch ~ case

select empno,ename,job,sal,
        decode(
                job,
                'MANAGER',sal *1,1,
                'SALESMAN',sal *1.05,
                'ANALYST',sal,
                sal * 1.03
        )as upsal
from emp;

-- case : if else ( 다중 조건문 )
-- when 값 또는 조건식 then 결과1
-- when 값 또는 조건식 then 결과2
-- when 값 또는 조건식 then 결과3
-- else 결과4
-- end

select empno,ename,comm,
    case
        when comm is null then '해당사항없음'
        when comm = 0 then '성과급 못 받음'
        when comm > 0 then '성과급 : ' || comm
        else '결과없음'
    end as comm_result
from emp;

-- 책 174,175 1
select empno, rpad(substr(empno,1,2),length(empno),'*'),
        ename, rpad(substr(ename,1,1),length(ename),'*') 
from emp
where length(ename) >= 5 and length(ename) <6;

-- 2
select empno,ename,sal,round(sal/21.5,1) as "DAY_PAY",round(sal/21.5/8,1) as "TIME_PAY"
from emp;

-- 3
select empno,ename,hiredate,next_day(add_months(hiredate,3),'월요일') as "R_JOB",
nvl(to_char(comm),'N/A') as comm
from emp; 

-- 4
select empno,ename,mgr,
    case
        when mgr is null then '0000'
        when substr(mgr,1,2) ='78' then '8888'
        when substr(mgr,1,2) ='77' then '777'
        when substr(mgr,1,2) ='76' then '6666'
        when substr(mgr,1,2) ='75' then '5555'
        else to_char(mgr)
    end as chg_mgr
from emp;

-- 결과의 개수
-- 단일행 함수 : 각 행에 각각 결과를 적용한다
-- 다중행 함수 : 각 행에 결과를 하나의 값으로 만든다

-- 다중행 함수(COUNT,SUM,AVG,MAX,MIN)
-- 다중행 함수와 일반컬럼은 같이 사용불가
-- 항상 결과의 레코드의 갯수가 일치해야 하기 때문에 같이 사용불가

select sal
from emp;

select sum(sal)
from emp;

-------------------------------

select 
from
where
order by

--------------------------------

-- group by 절 : 그룹 함수
-- 레코드를 특정 기준으로 묶어서 연산한다
-- 기준이 되는 컬럼은 다중행 함수랑 함께 사용 가능
-- having 절:  group by되어진 값에 조건절을 적용한다(일반 함수에도 적용 가능하다)
-- where 절에 그룹함수는 사용할 수 없다

select
from
group by 기준값(컬럼명)
having 조건식(그룹함수를 사용한다)- group by를 사용 했을 때만 사용 가능

select avg(sal) from emp where deptno = 10
union
select avg(sal) from emp where deptno = 20
union
select avg(sal) from emp where deptno = 30

select deptno, avg(sal) 
from emp
group by deptno;

select deptno,job, avg(sal)
from emp
group by deptno,job
order by deptno;
--------------------
-- 동작 순서
select	 5 
from 	 1
where 	 2
group by	 3
having 	 4
order by   6

-- 조인
-- 두개 이상의 테이블을 사용하여 데이터를 조회
-- 일반조일, 안시조인(표준조인)
-- cross join
-- equi join
-- non equi join
-- self join
-- outer join 

select *
from emp;

select *
from dept;

-- cross join
select *
from emp,dept;

-- equi join(두개의 테이블의 공통컬럼을 등가 바교한다)
select empno,ename,emp.deptno,dname,loc
from emp,dept
where emp.deptno = dept.deptno;

-- 테이블 이름 별칭사용 가능(별칭 테이블 사용시 기존테이블명 사용불가)
select empno,ename,e.deptno,dname,loc
from emp e,dept d
where e.deptno = d.deptno;

















월    2         3         4         5         6
급183730/826785/734920/826785/826785 3,399,005
출   2         9         8          9         9